# *********************************************************************
#	Script Name:	Bootstrap.yml
#	Written By :	Jeff Kuhner, Mac Sauceda
#	Date Written:	12\10\2022
# Description:	This script is used to bring up Remote Desktop Services (RDS) hosts on an AWS ASG (Auto Scale Group).
#                Use this in a Lifecycle hook to join the device to the desired domain, name it with a unique name,
#                join it to the RDS deployment, and add it to the Published Application or Desktop of your choice.
#                The YAML is used as a wrapper for a Powershell script that does the heavey lifting.  Both YAML and Powershell
#                are required to make this work.  The YAML code does snot need any modification to function in a new environment.
#                The Powershell will need some variables modified to suit your environment.  The comment bellow (Line 27) explains the 
#                restraints and requirements for the Powrshell script to be acknowledged properly as Powershell.
#                It uses YAML Block Scalar.  Search your favorite YAML site for an explanation of Block Scalar.
#	Requirements:	AWS ASG with Lifecycle Hooks. AWS SSM (System Manager).  This code copied into an SSM Document.

# *********************************************************************


#The Schema version must be 2.2 as it is relative to the language/document/template type #referenced
schemaVersion: "2.2"
description: "Sample instance bootstrap and send CompleteLifeCycleAction signal."
mainSteps:
- action: "aws:runPowerShellScript"
  name: "BootStrapInstance"
  inputs:
    runCommand:

#The “-|” referenced below is 1.2 YAML Block Scalar and allows us to type LITERAL powershell code after it so long as EVERYTHING!!! is indented beyond the pipe character “|” below, alleviating any yaml syntax errors that may arise from entering powershell code within yaml code/construct
    - |  

      # If a valiable is listed below that does not appear to be defined in the script, it is passed in automatically by the LifeCyle Hook and must not be changed.

      #This function returns instance metadata
        function Get-InstanceMetadata {
            try {
                return Invoke-RestMethod -Uri http://169.254.169.254/latest/dynamic/instance-identity/document
            }
            catch {
                Write-Error "Fail to retrieve IMDS."
                exit 1
            }    
        }
        
      #This function returns the ASG name
        function Start-PreBootStrapScriptAction {
            Set-DefaultAWSRegion -Region $Doc.region
            try {
                return (Get-EC2Tag -Filter @{Name="resource-id";Values=$Doc.instanceId} | Where-Object {$_.Key -eq 'aws:autoscaling:groupname'}).Value
            }
            catch {
                Write-Error "Fail to retrieve EC2 tags."
                exit 1
            } }
         
      #This function completes the lifecycle
        function Start-PostBootStrapScriptAction {

      #First IF statement assigns launch lifecycle hook to a variable
            if ($AsgName) {
                try {
                    $AsgLaunchHookName = (Get-ASLifecycleHooks -AutoScalingGroupName $AsgName | Where-Object {$_.LifecycleTransition -eq 'autoscaling:EC2_INSTANCE_LAUNCHING'}).LifecycleHookName
                }
                catch {
                    Write-Error "Fail to retrieve ASG launch hook name."
                    exit 1
                }
                
      #Second IF statement completes the lifecycle action
                if ($AsgLaunchHookName) {
                    try {
                        Complete-ASLifecycleAction -AutoScalingGroupName $AsgName -InstanceId $Doc.instanceId -LifecycleActionResult "CONTINUE" -LifecycleHookName $AsgLaunchHookName
                    }
                    catch {
                        Write-Error "Fail to complete ASG lifecycle action."
                        exit 1
                    }
                }
            }
      
        }
        
      #This function executes all tasks stated within
        function Start-BootstrapTasks {

      # Domain Join Section
      # ============================================

      # Setup the variables that are used for the Domain Join section of this script.
            [String]$Domain = "<Domain you want to join the server to>"
            [String]$DnsServer = "<address of the DNS server that you want assigned to the server>"
            [String]$UserName = "<put the Domain account you will use here to join the server to the Domain"
            [String]$S3BucketName = "<Name of the S3 Bucket where the Key and File are stored with the encrypted Credentials>"
            [String]$PasswordFile = "<Name of the password file>"
            [String]$Key1 = "<Name of the first key file>"
            [String]$Key2 = "<Path to and Name of the second key file>"
            [String]$OUPath = "<Fully Qualified OU Path where the server needs to be placed for Group Policy to be properly applyed>"
            [String]$ErrorLog = "<Path and file name for error logs>"

      # IF statement checks for domain membership and proceeds to join instance to the domain
            If ((Get-WmiObject -Class Win32_ComputerSystem).Domain -ne $Domain)
            {
                # Set Execution Policy for this run to Unrestricted
                Set-ExecutionPolicy unrestricted -Force

                # Get the ENI of the EC2 Instance and set the DNS Server for the Instance.  The DNS server in
                # case was the Domain COntroller that we wanted the server to use to join the Domain.
                $Eth = Get-NetAdapter | where {$_.ifDesc -notlike "TAP*"} | foreach InterfaceAlias | select -First 1
                Set-DNSClientServerAddress -interfaceAlias $Eth -ServerAddresses  ($DnsServer)
                
                # Pass Domain Creds
                # The Domain credentials are encrypted following this guide https://www.altaro.com/msp-dojo/encrypt-password-powershell/
                # One Key and the Password file are stored in an S3 Bucket. The other Key file is stored on the server image.
                # This was a personal choice so that all the peices were never in the same place.
                $File = read-s3object -bucketname $S3BucketName -key $Key1 -file $Key1 -region us-west-1
                $Password = Get-Content $File | ConvertTo-SecureString -Key (Get-Content $Key2)
                $Cred = New-Object -typename System.Management.Automation.PSCredential($UserName, $Password)

      # To join the server to the Domain, a unique name is needed.  This was our solution.
      # It creates a name that is unique, even if several servers are spinning up on the ASG at the same time.
      # Setup the new name for the server
                $TDate = Get-Date
                $Hour = ($TDate.Hour).ToString()
                $Day = ($TDate.Day).ToString()
                $Month = ($TDate.Month).ToString()
                $Minute = ($TDate.Minute).ToString()
                $Second = ($TDate.Second).ToString()
                $Mili = ($TDate.Millisecond).ToString()
                $NewName = "SH" + $Month + $Day + $Hour + $Minute + $Second + $Mili
                
      # Adding to Domain
                Try 
                {
                    # Check to see if the server has already been renamed.  the default name for EC2 instances
                    # at the time of this script was "EC2AMAZ-" and some randon letters and numbers.  If the name has not been changed
                    # yet, change it, then join it to the Domain.
                    If ($env:COMPUTERNAME -like "EC2AMAZ*") 
                    {   
                        Rename-Computer -NewName $NewName -Force
                    
                    }
       else{
                        Add-Computer -DomainName #Domain -OUPath $OUPath -Credential $Cred -Force -erroraction 'stop'
              }
                }
                
      #Get Error messages in a file
                Catch{
                echo $_.Exception | Out-File $ErrorLog -Append
                }

      # This removes the static DNS entry that we set earlier so that AWS DHCP can apply the normal DNS that the server should use.
      # Clear STATIC DNS settings so that new dynamic addresses can populate
                Set-DNSClientServerAddress -interfaceAlias $Eth -ResetServerAddresses

      # Exit 3010 initiates a reboot and records where it left off and resumes there after booting
                exit 3010
            }

      # Finish configuration section
      # ============================================================

      # Setup Variables that will be used in the Finish configuration section
          [String]$ServiceAccount = "<Name of domain account that will run the AWS SSM Service>"

      # A Domian Service account is needed for the SSM service as the script is run in the context of the service user.
      # If the user has no permissions to add a server to the RDS farm, then the script will fail.
      #  IF statement checks for membership of the awsrdsservice account (account which will manage #the amazonssmagent service) in the LOCAL Administrators group and proceeds to add it If #needed             
            If ((get-LocalGroupMember -Group Administrators -Member $ServiceAccount -ErrorAction SilentlyContinue).name -ne "phc\awsrdsservice")
            {
                Add-LocalGroupMember -Group Administrators -Member $ServiceAccount
            }
            
      #IF Statement sets the service account that manages the amazonssmagent to the account that #was just added to the administrators group and needed to execute administrative tasks as #instructed by Aws Systems Manager via the agent
            If ((gwmi win32_service -filter "name='AmazonSSMAgent'").StartName -notLike "*awsrdsservice*")
            {
                $File = read-s3object -bucketname phc-ec2-domain-join -key rds.txt -file rds.txt -region us-west-1
                $password = Get-Content $File | ConvertTo-SecureString -Key (Get-Content C:\Tools\awsrds.txt)
                $cred = New-Object -typename System.Management.Automation.PSCredential("phc\awsrdsservice",$password)
                $strpassword = $cred.getnetworkcredential().password
                $service = gwmi win32_service -filter "name='AmazonSSMAgent'"
                $service.Change($null,$null,$null,$null,$null,$null,"awsrdsservice@phc.local",$strpassword)
                exit 3010
            }
            
      #Last IF statement checks for domain membership assuming all prior steps executed correctly #and joins the RDS host to a collection managed by connection broker(s)
            If ((Get-WmiObject -Class Win32_ComputerSystem).Domain -eq "phc.local")
            {
                #Pass Domain Creds
                $username = "phc\ec2domainjoin"
                $File = read-s3object -bucketname phc-ec2-domain-join -key ec2.txt -file ec2.txt
                $password = Get-Content $File | ConvertTo-SecureString -Key (Get-Content C:\Tools\join.txt)
                $cred = New-Object -typename System.Management.Automation.PSCredential($username, $password)
            
                import-module "c:\tools\ps\Microsoft.ActiveDirectory.Management.dll"
                $CompName = $env:COMPUTERNAME + ".phc.local"
                $CompObject = Get-ADComputer -Identity $env:COMPUTERNAME
                $ActiveCB = (Get-RDConnectionBrokerHighAvailability -ConnectionBroker rdscb-221-1.phc.local).ActiveManagementServer
                Add-ADGroupMember "RDSSessionHosts" -Members $CompObject -Credential $cred
                Add-RDServer -Role RDS-RD-SERVER -ConnectionBroker $ActiveCB -Server $CompName
                Add-RDSessionHost -CollectionName "CallCenter" -ConnectionBroker $ActiveCB -SessionHost $CompName
                
      #Finally, Drop a file to signify document/process completion (Note: Future invocations will check for this file to determine if execution is needed or not)
                $Content = "Document Completed executing @"
                $Content + (get-date) | Out-file C:\Tools\CompletionCheck.txt
            }
        }
        


        ##########
        ## MAIN ##
        ##########
        $ErrorActionPreference = "Stop"
        $Doc = Get-InstanceMetaData

      #Finally, IF $Doc variable declared above is not null (assuming it assigned the proper data #returned by the function called) the following functions are called which are declared in the #prior pages
        if ($Doc) {
        
          if (!(test-path  "C:\Tools\CompletionCheck.txt"))
            {
            $AsgName = Start-PreBootStrapScriptAction

            Start-BootstrapTasks

            Start-PostBootStrapScriptAction
            }
          else
          {
            exit 0
          }
        }
